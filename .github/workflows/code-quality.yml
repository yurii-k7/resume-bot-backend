name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  pylint-check:
    name: Pylint Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install pipenv
      run: |
        pip install pipenv
        
    - name: Install dependencies
      run: |
        pipenv install --dev
        
    - name: Run pylint with score check
      run: |
        # Run pylint and capture the score
        echo "Running pylint on Python files..."
        
        # Disable some checks that are environment-specific or acceptable for this project
        PYLINT_OUTPUT=$(pipenv run pylint \
          --disable=duplicate-code,too-many-branches,too-many-statements,import-error \
          --fail-under=8.0 \
          --score=yes \
          lambda_handler.py src/ 2>&1)
        
        PYLINT_EXIT_CODE=$?
        echo "$PYLINT_OUTPUT"
        
        # Extract the score from pylint output
        SCORE=$(echo "$PYLINT_OUTPUT" | grep -oP "Your code has been rated at \K[0-9]+\.[0-9]+" | tail -1)
        
        if [ -z "$SCORE" ]; then
          echo "‚ùå Could not extract pylint score"
          exit 1
        fi
        
        echo "üìä Pylint Score: $SCORE/10.00"
        
        # Check if score meets minimum requirement
        if (( $(echo "$SCORE < 8.0" | bc -l) )); then
          echo "‚ùå Code quality check FAILED!"
          echo "   Score: $SCORE/10.00 (minimum required: 8.0/10.00)"
          echo "   Please improve code quality before merging."
          exit 1
        else
          echo "‚úÖ Code quality check PASSED!"
          echo "   Score: $SCORE/10.00 (minimum required: 8.0/10.00)"
        fi
        
        # Also fail if pylint itself failed
        if [ $PYLINT_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Pylint failed with exit code: $PYLINT_EXIT_CODE"
          exit $PYLINT_EXIT_CODE
        fi
        
    - name: Generate pylint report
      if: always()
      run: |
        mkdir -p reports
        pipenv run pylint \
          --disable=duplicate-code,too-many-branches,too-many-statements,import-error \
          --output-format=json \
          lambda_handler.py src/ > reports/pylint-report.json || true
        
        pipenv run pylint \
          --disable=duplicate-code,too-many-branches,too-many-statements,import-error \
          --output-format=text \
          lambda_handler.py src/ > reports/pylint-report.txt || true
        
    - name: Upload pylint reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pylint-reports
        path: reports/
        retention-days: 30
        
    - name: Comment PR with pylint results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            // Try to read the text report for summary
            let reportContent = '';
            let score = 'Unknown';
            
            try {
              reportContent = fs.readFileSync('reports/pylint-report.txt', 'utf8');
              const scoreMatch = reportContent.match(/Your code has been rated at ([\d.]+)\/10/);
              if (scoreMatch) {
                score = scoreMatch[1];
              }
            } catch (e) {
              console.log('Could not read pylint report:', e.message);
            }
            
            const scoreFloat = parseFloat(score);
            const passed = scoreFloat >= 8.0;
            const statusIcon = passed ? '‚úÖ' : '‚ùå';
            const statusText = passed ? 'PASSED' : 'FAILED';
            
            const comment = "## " + statusIcon + " Code Quality Check " + statusText + "\n\n" +
              "**Pylint Score: " + score + "/10.00** (minimum required: 8.0/10.00)\n\n" +
              (passed ? 
                "üéâ Great job! Your code meets the quality standards." : 
                "‚ö†Ô∏è Code quality needs improvement. Please address the issues below before merging."
              ) + "\n\n" +
              "üìã **Full Report Available**: Check the workflow artifacts for detailed pylint reports.\n\n" +
              "---\n" +
              "*This comment was automatically generated by the Code Quality workflow.*";
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.log('Error posting PR comment:', error.message);
          }